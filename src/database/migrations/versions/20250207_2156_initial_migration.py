"""Initial migration

Revision ID: 117fd14ee478
Revises:
Create Date: 2025-02-07 21:56:27.068291

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op


# revision identifiers, used by Alembic.
revision: str = "117fd14ee478"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("telegram_id", sa.BigInteger(), nullable=False),
        sa.Column("username", sa.String(length=32), nullable=True),
        sa.Column("first_name", sa.String(length=64), nullable=True),
        sa.Column("last_name", sa.String(length=64), nullable=True),
        sa.Column("e_mail", sa.String(length=100), nullable=True),
        sa.Column("gender", sa.Enum("MALE", "FEMALE", name="gender"), nullable=True),
        sa.Column(
            "level",
            sa.Enum("FIRST", "SECOND", "MINKAIFA", "COMPETITION", "START", name="userlevel"),
            nullable=True,
        ),
        sa.Column("role", sa.Enum("ADMIN", "CURATOR", "USER", name="userrole"), nullable=False),
        sa.PrimaryKeyConstraint("telegram_id"),
        sa.UniqueConstraint("e_mail"),
        sa.UniqueConstraint("telegram_id"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "workouts",
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("date", sa.Date(), nullable=True),
        sa.Column(
            "level",
            sa.Enum("FIRST", "SECOND", "MINKAIFA", "COMPETITION", "START", name="userlevel"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "biometrics",
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("height", sa.Integer(), nullable=True),
        sa.Column("weight", sa.Numeric(precision=5, scale=2), nullable=True),
        sa.Column("birthday", sa.Date(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.telegram_id"],
        ),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("user_id"),
    )
    op.create_table(
        "curator_user",
        sa.Column("curator_id", sa.BigInteger(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(["curator_id"], ["users.telegram_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.telegram_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("curator_id", "user_id"),
    )
    op.create_table(
        "subscriptions",
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "subscription_type",
            sa.Enum(
                "STANDARD",
                "WITH_CURATOR",
                "START_PROGRAM",
                "ONE_MONTH_START",
                name="subscriptiontype",
            ),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum("ACTIVE", "FROZEN", "EXPIRED", name="subscriptionstatus"),
            nullable=False,
        ),
        sa.Column("registered_date", sa.Date(), server_default=sa.text("now()"), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.telegram_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("user_id"),
    )
    op.create_table(
        "workoutresults",
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("result", sa.Text(), nullable=False),
        sa.Column("workout_id", sa.BigInteger(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.telegram_id"],
        ),
        sa.ForeignKeyConstraint(
            ["workout_id"],
            ["workouts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "payments",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("sub_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "sub_type",
            sa.Enum(
                "STANDARD",
                "WITH_CURATOR",
                "START_PROGRAM",
                "ONE_MONTH_START",
                name="subscriptiontype",
            ),
            nullable=False,
        ),
        sa.Column("amount", sa.BigInteger(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("PENDING", "COMPLETED", "FAILED", name="paymentstatus"),
            nullable=False,
        ),
        sa.Column("payment_date", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(["sub_id"], ["subscriptions.user_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("payments")
    op.drop_table("workoutresults")
    op.drop_table("subscriptions")
    op.drop_table("curator_user")
    op.drop_table("biometrics")
    op.drop_table("workouts")
    op.drop_table("users")
    # ### end Alembic commands ###
