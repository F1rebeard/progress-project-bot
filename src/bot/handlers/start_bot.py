from datetime import date

from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from src.bot.keyboards.subscription import (
    renew_or_change_subscription_kb,
    subscription_selection_btn,
)
from src.config.bot import ADMIN_IDS
from src.database.base import connection
from src.database.dao import UserDAO
from src.database.models.subscription import SubscriptionStatus

start_command_router = Router()


@connection(commit=False)
async def check_user_status(
    telegram_id: int, session: AsyncSession
) -> tuple[str | None, str, str | None, str | None, date | None]:
    """
    Retrieves the user's name, system status, and subscription details.

    The function determines the user's state based on their database record:
    - **Admin**: If the user is in `ADMIN_IDS`, they are assigned "admin" status.
    - **New User**: If no record exists, they are considered a "new_user".
    - **Pending Registration**: If a record exists but lacks a first name, yet has an
     active subscription.
    - **Registered User**: If the user has both a first and last name, they are "registered",
      and their subscription status is retrieved.

    Args:
        telegram_id (int): The Telegram ID of the user.
        session (AsyncSession): The database session for asynchronous queries.

    Returns:
        tuple[str | None, str, str | None, date | None]:
            - The user's first name (or `None` if not available).
            - The user status (`"new_user"`, `"admin"`, `"pending_registration"`,
             or `"registered"`).
            - The subscription status as a string (`None` if no active subscription).
            - The subscription end date (`None` if no active subscription).
    """
    user = await UserDAO.find_one_or_none_by_id(telegram_id, session)
    user_status = "new_user"
    user_name = None
    sub_status = None
    sub_type = None
    sub_end_date = None

    if user:
        if telegram_id in ADMIN_IDS:
            user_status = "admin"
            user_name = user.first_name

        if user.first_name is None and user.subscription.status == SubscriptionStatus.ACTIVE:
            user_status = "pending_registration"

        if user.first_name and user.last_name:
            user_name = user.first_name
            user_status = "registered"
            sub_status = user.subscription.status.value
            sub_type = user.subscription.subscription_type.value
            sub_end_date = user.subscription.end_date

    return user_name, user_status, sub_status, sub_type, sub_end_date


@start_command_router.message(CommandStart())
async def cmd_start(message: Message):
    """
    Handles the /start command, determining the user's status and responding accordingly.

    The function checks the user's status in the system and sends an appropriate response:
    - **Admin**: Displays an admin greeting with a control panel message.
    - **New User**: Guides them through the subscription and registration process.
    - **Pending Registration**: Reminds the user to complete registration.
    - **Registered User**: Provides subscription status and relevant instructions:
        - **Active**: Shows remaining days and encourages training.
        - **Frozen**: Informs the user about frozen status and suggests unfreezing.
        - **Expired**: Notifies the user that their subscription has ended and prompts renewal.

    Args:
        message (Message): The incoming Telegram message.
        session (AsyncSession): The database session for querying user details.

    Returns:
        None: Sends an appropriate message based on the user's status.
    """
    telegram_id = message.from_user.id
    (user_name, user_status, sub_status, sub_type, sub_end_date) = await check_user_status(
        telegram_id
    )
    for admin_id in ADMIN_IDS:
        await message.answer(text=str(admin_id))
    if user_status == "admin":
        await message.answer(
            text=f"üí™ –ü—Ä–∏–≤–µ—Ç, <b>–∞–¥–º–∏–Ω</b> {user_name}!\n"
            f"üîß –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞.\n"
            f"üìå –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –±–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–æ–π."
        )
    if user_status == "new_user":
        await message.answer(
            text='üî• –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>"–ü—Ä–æ–≥—Ä–µ—Å—Å"</b>!\n'
            "üí™ –ó–¥–µ—Å—å —Ç—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏!\n\n"
            "üèãÔ∏è‚Äç‚ôÇÔ∏è –ö–∞–∫ –Ω–∞—á–∞—Ç—å?\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ üìã\n"
            "2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É üí≥\n"
            "3Ô∏è‚É£ –ü—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üìù\n"
            "4Ô∏è‚É£ –¢—Ä–µ–Ω–∏—Ä—É–π—Å—è —Å –Ω–∞–º–∏ Ô∏è üèãÔ∏è‚Äç‚ôÄÔ∏è\n\n"
            "üëâ –ù–∞—á–Ω–∏ —Å–≤–æ–π <b>–ø—Ä–æ–≥—Ä–µ—Å—Å</b> –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ!",
            reply_markup=subscription_selection_btn(),
        )
    if user_status == "pending_registration":
        await message.answer(
            text="üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!\n"
            "–¢—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª(–∞) –ø–æ–¥–ø–∏—Å–∫—É, –Ω–æ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª(–∞) —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "üìù –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ ‚Äì –∑–∞–ø–æ–ª–Ω–∏ –¥–∞–Ω–Ω—ã–µ, –∏ –º—ã –Ω–∞—á–Ω–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!"
        )
    if user_status == "registered":
        formated_subs_end_date = sub_end_date.strftime("%d.%m.%Y")
        days_till_end = (sub_end_date - date.today()).days
        if sub_status == "–ê–∫—Ç–∏–≤–Ω–∞" and days_till_end == 0:
            await message.answer(
                text=f"‚ö°Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ, {user_name}!</b>\n\n"
                f"–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è <b>—Å–µ–≥–æ–¥–Ω—è</b>!\n"
                f"üöÄ <b>–ù–µ —Ç–µ—Ä—è–π —Ç–µ–º–ø!</b> –ü—Ä–æ–¥–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.",
                reply_markup=renew_or_change_subscription_kb(),
            )
        elif sub_status == "–ê–∫—Ç–∏–≤–Ω–∞" and days_till_end in (1, 2):
            await message.answer(
                text=f"‚ö°Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ, {user_name}!</b>\n\n"
                f"–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è <b>–Ω–∞ –¥–Ω—è—Ö</b>!\n"
                f"üöÄ <b>–ù–µ —Ç–µ—Ä—è–π —Ç–µ–º–ø!</b> –ü—Ä–æ–¥–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.",
                reply_markup=renew_or_change_subscription_kb(),
            )
        elif sub_status == "–ê–∫—Ç–∏–≤–Ω–∞":
            await message.answer(
                text=f"üèÜ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –ü—Ä–æ–≥—Ä–µ—Å—Å, {user_name}</b>!\n\n"
                f"–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{days_till_end}</b>\n"
                f"üìÖ <b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {formated_subs_end_date}</b>\n"
            )
        elif sub_status == "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–∞":
            await message.answer(
                text="‚ùÑÔ∏è <b>–û–π-–æ–π, —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞!</b>\n"
                "–ú—ã —Å–∫—É—á–∞–µ–º –ø–æ —Ç–≤–æ–∏–º —Ä–µ–∫–æ—Ä–¥–∞–º, –∞ —à—Ç–∞–Ω–≥–∞ –∑–∞—Å—Ç–æ—è–ª–∞—Å—å‚Ä¶\n"
                "üëâ <b>–†–∞–∑–º–æ—Ä–æ–∑—å –ø–æ–¥–ø–∏—Å–∫—É</b> –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –∏–≥—Ä—É! üèãÔ∏è‚Äç‚ôÄÔ∏è"
            )
        if sub_status == "–ò—Å—Ç–µ–∫–ª–∞":
            await message.answer(
                text=f"–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ <b>–∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å {formated_subs_end_date} üò¢</b>.\n"
                f"üî• –ù–æ —Ç—ã –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n"
                f"üìå –û–±–Ω–æ–≤–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –Ω–∞–º–∏!\n"
            )
